import time
from src.utils.logger import github_interface_logger

class RepoManager:
    def __init__(self, github_api, repo_prefix):
        self.github_api = github_api
        self.repo_prefix = repo_prefix
        github_interface_logger.info(f"Initialized RepoManager with prefix: {repo_prefix}")

    def create_repo(self, project_name):
        repo_name = f"{self.repo_prefix}{project_name}"
        repo = self.github_api.create_repo(repo_name)
        if repo:
            github_interface_logger.info(f"Created repository: {repo_name}")
            return repo_name
        github_interface_logger.error(f"Failed to create repository: {repo_name}")
        return None

    def push_project(self, repo_name, files):
        repo = self.github_api.get_repo(repo_name)
        if not repo:
            github_interface_logger.error(f"Repository not found: {repo_name}")
            return

        branch_name = f"feature/initial-project-setup"
        self.github_api.create_branch(repo, branch_name)

        for file in files:
            self._create_file(repo, file['name'], file['content'], branch_name)
            time.sleep(1)  # Add a small delay to avoid rate limiting

        pr_title = "Initial project setup"
        pr_body = "This pull request contains the initial project setup generated by AutoGitHub."
        self.github_api.create_pull_request(repo, pr_title, pr_body, branch_name)

    def update_project(self, repo_name, files):
        repo = self.github_api.get_repo(repo_name)
        if not repo:
            github_interface_logger.error(f"Repository not found: {repo_name}")
            return

        branch_name = f"feature/project-update-{int(time.time())}"
        self.github_api.create_branch(repo, branch_name)

        for file in files:
            try:
                existing_file = repo.get_contents(file['name'], ref="master")
                self._update_file(repo, file['name'], file['content'], existing_file.sha, branch_name)
            except:
                self._create_file(repo, file['name'], file['content'], branch_name)
            time.sleep(1)  # Add a small delay to avoid rate limiting

        pr_title = "Project update"
        pr_body = "This pull request contains updates to the project generated by AutoGitHub."
        self.github_api.create_pull_request(repo, pr_title, pr_body, branch_name)

    def _create_file(self, repo, filename, content, branch):
        commit_message = f"Add {filename}"
        self.github_api.create_file(repo, filename, content, commit_message, branch=branch)
        github_interface_logger.info(f"Created file: {filename} in repository: {repo.name}")

    def _update_file(self, repo, filename, content, sha, branch):
        commit_message = f"Update {filename}"
        self.github_api.update_file(repo, filename, content, commit_message, sha, branch=branch)
        github_interface_logger.info(f"Updated file: {filename} in repository: {repo.name}")

    def get_project_files(self, repo_name):
        repo = self.github_api.get_repo(repo_name)
        if not repo:
            github_interface_logger.error(f"Repository not found: {repo_name}")
            return []

        files = []
        contents = repo.get_contents("")
        while contents:
            file_content = contents.pop(0)
            if file_content.type == "dir":
                contents.extend(repo.get_contents(file_content.path))
            else:
                files.append({
                    'name': file_content.path,
                    'content': file_content.decoded_content.decode('utf-8')
                })
        return files

    def delete_repo(self, repo_name):
        repo = self.github_api.get_repo(repo_name)
        if not repo:
            github_interface_logger.error(f"Repository not found: {repo_name}")
            return False

        try:
            repo.delete()
            github_interface_logger.info(f"Deleted repository: {repo_name}")
            return True
        except Exception as e:
            github_interface_logger.error(f"Failed to delete repository {repo_name}: {str(e)}")
            return False
